---
import Container from "./Container.astro";
import Topic from "./Topic.astro";
import teamData from "./Data/team.json";
import Accordion from "./Accordion.astro";
---

<Container>
  <div class="relative flex flex-col items-center md:flex-row mt-6">
    <Topic
      title="Preguntas frecuentes"
      description="Conoce más sobre nuestro equipo y cómo trabajamos"
    />
  </div>

  <div class="my-6">
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-7">
      {
        teamData.process.map((item) => {
          return (
            <Accordion
              index={item.index}
              title={item.label}
              description={item.content}
            />
          );
        })
      }
    </div>
  </div>

  <div class="relative flex flex-col items-center md:flex-row pt-6">
    <Topic
      title="Nuestro equipo"
      description="Conoce a nuestros colaboradores, un grupo de estudiantes guiados de su asesor. Juntos son los responsables de llevar a cabo este gran proyecto|."
    />
  </div>

  <div class="flex-row items-center py-5" id="team">
    <div class="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-3 gap-4">
      {
        teamData.team.map(({ title, description, name, link, profile }, index) => (
          <div class="min-h-[345px] px-[35px] py-10 bg-white rounded-[45px] shadow-card border border-zinc-900 flex-col justify-start items-start gap-2.5 inline-flex text-black team-card">
            <div class="flex-col justify-start items-start gap-7 flex w-full">
              <div class="self-stretch justify-start items-start inline-flex">
                <div class="grow shrink basis-0 justify-start items-center gap-8 flex">
                  <div class="w-[120px] h-[120px] left-0 top-0 relative flex-shrink-0">
                    <img
                      src={profile}
                      class="w-full h-full rounded-full ring ring-green-600 ring-offset-green-500 ring-offset-1 object-cover aspect-square"
                      alt={name}
                    />
                  </div>
                  <div class="flex-col justify-end items-start inline-flex">
                    <div class="text-lg font-normal">{title}</div>
                    <div class="text-xl font-medium">{name}</div>
                  </div>
                </div>
                <a class="top-0 right-0" href={link}>
                  <img src="/team/lng.svg" alt="vector" />
                </a>
              </div>
              <hr class="w-full border border-black" />
              
              {/* Mostrar preview de la descripción */}
              <div class="w-full">
                <p 
                  class={`text-sm md:text-lg transition-all duration-300 overflow-hidden ${description.length > 100 ? 'cursor-pointer hover:text-gray-600' : ''}`}
                  data-full-text={description}
                  data-team-index={index}
                  id={`team-description-${index}`}
                >
                  {description.length > 100 ? description.substring(0, 100) + '...' : description}
                </p>
                
                {/* Botón para expandir/contraer si la descripción es larga */}
                {description.length > 100 && (
                  <button
                    class="mt-2 text-xs border-[2px] border-green-500 p-2 text-green-500 hover:text-white font-medium transition-colors duration-200 flex items-center gap-1"
                    data-team-index={index}
                    id={`team-toggle-${index}`}
                    onclick={`toggleTeamDescription(${index})`}
                  >
                    <span id={`team-toggle-text-${index}`}>Ver más</span>
                    <svg 
                      class="w-3 h-3 transition-transform duration-200" 
                      id={`team-toggle-icon-${index}`}
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </button>
                )}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
  <div class="w-full justify-center md:justify-end items-center inline-flex">
    <button
      class="px-8 py-5 bg-zinc-900 hover:bg-white rounded-2xl text-center text-white hover:text-black border text-xl font-normal leading-7"
      >Ver más información
    </button>
  </div>
</Container>

<script is:inline>
  function toggleTeamDescription(index) {
    const description = document.getElementById(`team-description-${index}`);
    const toggleButton = document.getElementById(`team-toggle-${index}`);
    const toggleText = document.getElementById(`team-toggle-text-${index}`);
    const toggleIcon = document.getElementById(`team-toggle-icon-${index}`);
    
    if (!description || !toggleButton || !toggleText || !toggleIcon) return;
    
    const fullText = description.getAttribute('data-full-text');
    const currentText = description.textContent;
    const isExpanded = !currentText.includes('...');
    
    if (isExpanded) {
      // Contraer
      description.textContent = fullText.substring(0, 100) + '...';
      toggleText.textContent = 'Ver más';
      toggleIcon.style.transform = 'rotate(0deg)';
      description.classList.remove('line-clamp-none');
    } else {
      // Expandir
      description.textContent = fullText;
      toggleText.textContent = 'Ver menos';
      toggleIcon.style.transform = 'rotate(180deg)';
      description.classList.add('line-clamp-none');
    }
  }
  
  // Agregar event listeners cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', function() {
    // Agregar event listeners a todas las descripciones clickeables
    const descriptions = document.querySelectorAll('[data-team-index]');
    descriptions.forEach((desc) => {
      if (desc.classList.contains('cursor-pointer')) {
        desc.addEventListener('click', function() {
          const index = this.getAttribute('data-team-index');
          if (index !== null) {
            toggleTeamDescription(parseInt(index));
          }
        });
      }
    });
  });
</script>

<style>
  .team-card {
    transition: all 0.3s ease;
  }
  
  .team-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
  
  .line-clamp-none {
    -webkit-line-clamp: unset !important;
  }
  
  /* Animación suave para el texto */
  [data-full-text] {
    transition: all 0.3s ease;
  }
  
  /* Estilo para el botón de toggle */
  button[data-team-index]:hover {
    background-color: #22c55e ;
    border-radius: 4px;
  }
</style>
